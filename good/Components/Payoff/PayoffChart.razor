@using good.Models
@using good.Utils
@using Microsoft.AspNetCore.Components
@namespace good.Components.Payoff

<div class="bg-white dark:bg-slate-800 border border-slate-200 dark:border-slate-700 rounded-xl shadow-lg">
    <div class="px-6 pt-6 pb-3">
        <div class="flex items-center space-x-2 text-lg font-bold">
            <!-- BarChart Icon -->
            <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><rect x="3" y="4" width="18" height="18" rx="2"/><path d="M8 2v4M16 2v4M3 10h18"/></svg>
            <span>Debt Payoff Projection</span>
        </div>
    </div>
    <div class="px-6 pb-6">
        <div class="w-full" style="height: 320px;">
            @if (chartData.Count == 0)
            {
                <div class="flex items-center justify-center h-full text-slate-800 text-lg">
                    No data to display. Add debts to see your payoff projection.
                </div>
            }
            else
            {
                <svg viewBox="0 0 600 320" width="100%" height="100%" class="w-full h-full">
                    <!-- Grid lines -->
                    @for (int i = 0; i <= 5; i++)
                    {
                        var y = 40 + i * 48;
                        <line x1="60" y1="@y" x2="580" y2="@y" stroke="#e5e7eb" stroke-width="1" />
                    }
                    <!-- Y axis -->
                    <line x1="60" y1="40" x2="60" y2="280" stroke="#94a3b8" stroke-width="2" />
                    <!-- X axis -->
                    <line x1="60" y1="280" x2="580" y2="280" stroke="#94a3b8" stroke-width="2" />
                    <!-- Y axis labels -->
                    <g>
                        @GetYAxisLabels(chartData)
                    </g>
                    <!-- X axis labels (every 12 months) -->
                    <g>
                        @GetXAxisLabels(chartData)
                    </g>
                    <!-- Payoff line -->
                    <polyline fill="none" stroke="#2563eb" stroke-width="3" points="@string.Join(" ", chartData.Select((p, i) => $"{60 + 520.0 * i / (chartData.Count - 1)},{MapY(p.Balance)}"))" />
                    <!-- Area fill (optional, for modern look) -->
                    <polygon fill="url(#areaGradient)" stroke="none" points="@string.Join(" ", chartData.Select((p, i) => $"{60 + 520.0 * i / (chartData.Count - 1)},{MapY(p.Balance)}")) 580,280 60,280" />
                    <defs>
                        <linearGradient id="areaGradient" x1="0" y1="0" x2="0" y2="1">
                            <stop offset="0%" stop-color="#2563eb" stop-opacity="0.18" />
                            <stop offset="100%" stop-color="#2563eb" stop-opacity="0.03" />
                        </linearGradient>
                    </defs>
                    <!-- Markers -->
                    @foreach (var (p, i) in chartData.Select((p, i) => (p, i)).Where(x => x.i % 12 == 0 || x.i == chartData.Count - 1))
                    {
                        var x = 60 + 520.0 * i / (chartData.Count - 1);
                        var y = MapY(p.Balance);
                        <circle cx="@x" cy="@y" r="4" fill="#2563eb" />
                    }
                </svg>
            }
        </div>
        <div class="mt-4 text-center">
            <p class="text-sm text-slate-600 dark:text-slate-800">
                Projection based on @(Strategy == "avalanche" ? "Debt Avalanche" : "Debt Snowball") strategy
                @if (ExtraPayment > 0)
                {
                    <span> with @ExtraPayment.ToString("C0") extra monthly payment</span>
                }
            </p>
        </div>
    </div>
</div>

@code {
    public class PayoffChartPoint
    {
        public string MonthLabel { get; set; } = string.Empty;
        public double Balance { get; set; }
    }

    [Parameter] public List<Debt> Debts { get; set; } = new();
    [Parameter] public decimal ExtraPayment { get; set; }
    [Parameter] public string Strategy { get; set; } = "avalanche";

    private List<PayoffChartPoint> chartData = new();

    protected override void OnParametersSet()
    {
        SetupChart();
    }

    private void SetupChart()
    {
        chartData.Clear();
        var workingDebts = Debts.Select(d => d.Clone()).ToList();
        double totalBalance = (double)workingDebts.Sum(d => d.Balance);
        int maxMonths = 60;
        for (int month = 0; month <= maxMonths && totalBalance > 0.01; month++)
        {
            chartData.Add(new PayoffChartPoint
            {
                MonthLabel = $"Month {month}",
                Balance = totalBalance
            });
            // Simulate one month
            foreach (var debt in workingDebts)
            {
                if (debt.Balance > 0)
                {
                    var monthlyInterest = (debt.Balance * debt.InterestRate / 100m) / 12m;
                    debt.Balance += monthlyInterest;
                }
            }
            foreach (var debt in workingDebts)
            {
                if (debt.Balance > 0)
                {
                    var payment = Math.Min(debt.MinimumPayment, debt.Balance);
                    debt.Balance -= payment;
                }
            }
            var remainingExtra = ExtraPayment;
            foreach (var debt in workingDebts)
            {
                if (debt.Balance > 0 && remainingExtra > 0)
                {
                    var extraApplied = Math.Min(remainingExtra, debt.Balance);
                    debt.Balance -= extraApplied;
                    remainingExtra -= extraApplied;
                    break;
                }
            }
            totalBalance = (double)workingDebts.Sum(d => d.Balance);
        }
    }

    private double MapY(double balance)
    {
        var max = chartData.Max(p => p.Balance);
        var min = chartData.Min(p => p.Balance);
        if (max == min) return 280;
        // 40 (top) to 280 (bottom)
        return 40 + (max - balance) * 240 / (max - min);
    }

    private MarkupString GetYAxisLabels(List<PayoffChartPoint> data)
    {
        if (data.Count == 0) return new MarkupString("");
        var max = data.Max(p => p.Balance);
        var min = data.Min(p => p.Balance);
        var sb = new System.Text.StringBuilder();
        for (int i = 0; i <= 5; i++)
        {
            var yVal = max - (max - min) * i / 5;
            var y = 40 + i * 48 + 5;
            sb.Append($"<text x='55' y='{y}' font-size='12' fill='#64748b' text-anchor='end'>{yVal.ToString("C0")}</text>");
        }
        return new MarkupString(sb.ToString());
    }

    private MarkupString GetXAxisLabels(List<PayoffChartPoint> data)
    {
        if (data.Count == 0) return new MarkupString("");
        var sb = new System.Text.StringBuilder();
        for (int i = 0; i < data.Count; i += 12)
        {
            var x = 60 + (520.0 * i / (data.Count - 1));
            sb.Append($"<text x='{x}' y='300' font-size='12' fill='#64748b' text-anchor='middle'>{data[i].MonthLabel}</text>");
        }
        return new MarkupString(sb.ToString());
    }
} 