@using good.Models
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@namespace good.Components.Debt

<div class="bg-white shadow-lg rounded-2xl mb-10 px-8 py-6 w-full max-w-3xl mx-auto">
    <div class="flex items-center justify-between mb-4">
        <div class="flex items-center space-x-4">
            <div class="w-12 h-12 bg-[#22336a] rounded-full flex items-center justify-center">
                <!-- CreditCard Icon -->
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><rect x="2" y="5" width="20" height="14" rx="2"/><path d="M2 10h20"/></svg>
            </div>
            <div>
                <div class="text-lg font-extrabold text-[#151e2e]">@Debt.Name</div>
                <span class="inline-block px-2 py-0.5 rounded text-xs font-bold @(Debt.Status == "closed" ? "bg-[#e6f9f0] text-[#22c55e]" : "bg-[#fbeee6] text-[#b86b3b]")">
                    @Debt.Status
                </span>
            </div>
        </div>
        <div class="flex space-x-2">
            <button class="h-8 w-8 flex items-center justify-center text-[#7b8ca6] hover:text-[#2563eb] focus:ring-2 focus:ring-brandblue5 focus:outline-none hover:scale-110 transition" @onclick="() => OnEdit.InvokeAsync(Debt)" aria-label="Edit Debt">
                <!-- Edit Icon -->
                <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M15.232 5.232l3.536 3.536M9 13l6-6m2 2l-6 6m-2 2h6"/></svg>
            </button>
            <button class="h-8 w-8 flex items-center justify-center text-[#7b8ca6] hover:text-[#ff7a7a] focus:ring-2 focus:ring-brandred focus:outline-none hover:scale-110 transition" @onclick="() => OnDelete.InvokeAsync(Debt)" aria-label="Delete Debt">
                <!-- Trash Icon -->
                <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M6 18L18 6M6 6l12 12"/></svg>
            </button>
        </div>
    </div>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-8 mb-6">
        <div class="space-y-2">
            <div class="flex items-center text-[#7b8ca6] text-sm font-medium">
                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M12 1v22M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"/></svg>
                Current Balance
            </div>
            <div class="text-2xl font-extrabold text-[#ff7a7a]">@Debt.Balance.ToString("C")</div>
            <div class="text-[#7b8ca6] text-sm">Minimum Payment</div>
            <div class="text-base font-bold text-[#22c55e]">@Debt.MinimumPayment.ToString("C")</div>
        </div>
        <div class="space-y-2">
            <div class="flex items-center text-[#7b8ca6] text-sm font-medium">
                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M22 17L13.5 8.5 8.5 13.5 2 7"/><path d="M16 17h6v-6"/></svg>
                Interest Rate
            </div>
            <div class="text-2xl font-extrabold text-[#151e2e]">@Debt.InterestRate.ToString("F2")%</div>
            <div class="text-[#7b8ca6] text-sm">Total Paid</div>
            <div class="text-base font-bold text-[#22c55e]">@TotalPaid.ToString("C")</div>
        </div>
    </div>
    @{
        var totalInterest = TotalInterest;
        var totalToPay = (totalInterest == decimal.MaxValue || totalInterest > 1_000_000_000m) ? (decimal?)null : Debt.Balance + totalInterest;
        var customInterest = CustomTotalInterest;
        var customToPay = (customInterest == decimal.MaxValue || customInterest > 1_000_000_000m) ? (decimal?)null : Debt.Balance + customInterest;
    }
    @if ((Debt.Status?.Trim().ToLower()) == "open")
    {
        <div class="bg-brandblue4 rounded-2xl p-6 mb-6">
            <div class="flex flex-col md:flex-row md:items-center md:justify-between text-white text-base font-bold">
                <div class="flex-1 flex items-center space-x-4 mb-2 md:mb-0">
                    <div class="flex items-center">
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><rect x="3" y="4" width="18" height="18" rx="2"/><path d="M16 2v4M8 2v4M3 10h18"/></svg>
                        <span class="text-brandmuted font-bold">Payoff Time</span>
                    </div>
                    <span class="ml-2 text-white font-extrabold">@TimeToPayoff</span>
                </div>
                <div class="flex-1 flex items-center space-x-4">
                    <span class="text-brandmuted font-bold">Total Interest</span>
                    <span class="text-brandyellow font-extrabold">@(totalInterest == decimal.MaxValue || totalInterest > 1_000_000_000m ? "N/A" : totalInterest.ToString("C"))</span>
                </div>
                <div class="flex-1 flex items-center space-x-4 justify-end">
                    <span class="text-brandmuted font-bold">Total to Pay</span>
                    <span class="text-brandred font-extrabold">@(totalToPay == null ? "N/A" : totalToPay.Value.ToString("C"))</span>
                </div>
            </div>
            <div class="mt-4">
                <label class="block text-white font-bold mb-1">New Projection: Add Extra Monthly Payment</label>
                <div class="flex flex-nowrap items-center gap-2 mb-2">
                    <span class="inline-block px-3 py-1 rounded bg-white text-slate-800 font-semibold shadow whitespace-nowrap">
                        @Debt.MinimumPayment.ToString("C") +
                    </span>
                    <input type="number"
                           min="0"
                           step="1"
                           class="w-24 px-2 py-1 rounded border border-slate-300 text-slate-800 font-semibold whitespace-nowrap"
                           value="@extraMonthlyPayment"
                           @oninput="OnExtraPaymentChanged"
                           placeholder="Extra $/mo" />
                    <span class="text-xs text-slate-500 whitespace-nowrap">(minimum payment included)</span>
                </div>
                <div class="flex flex-nowrap items-center justify-between text-base font-bold bg-brandblue3 rounded-lg p-4 gap-x-6 overflow-x-auto">
                    <div class="flex items-center gap-2 whitespace-nowrap">
                        <span class="text-brandmuted font-bold">New Payoff Time</span>
                        <span class="ml-2 text-white font-extrabold">@CustomTimeToPayoff</span>
                    </div>
                    <div class="flex items-center gap-2 whitespace-nowrap">
                        <span class="text-brandmuted font-bold">New Total Interest</span>
                        <span class="text-brandyellow font-extrabold">@(customInterest == decimal.MaxValue || customInterest > 1_000_000_000m ? "N/A" : customInterest.ToString("C"))</span>
                    </div>
                    <div class="flex items-center gap-2 whitespace-nowrap">
                        <span class="text-brandmuted font-bold">New Total to Pay</span>
                        <span class="text-brandred font-extrabold">@(customToPay == null ? "N/A" : customToPay.Value.ToString("C"))</span>
                    </div>
                </div>
            </div>
        </div>
        <button class="w-full bg-[#2563eb] hover:bg-[#1d4ed8] text-white font-bold flex items-center justify-center py-3 rounded-lg shadow transition mb-2 focus:ring-2 focus:ring-brandblue5 focus:outline-none hover:scale-105" @onclick="ShowPaymentModal">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M12 5v14M5 12h14"/></svg>
            Add Payment
        </button>
    }
    @if (Debt.Payments != null && Debt.Payments.Count > 0)
    {
        <div class="mt-4">
            <div class="text-[#7b8ca6] text-sm font-bold mb-2">Recent Payments</div>
            <div class="space-y-2 max-h-32 overflow-y-auto">
                @foreach (var payment in Debt.Payments.OrderByDescending(p => p.Date).Take(3))
                {
                    <div class="flex justify-between items-center text-sm bg-[#f5f7fa] rounded p-2">
                        <span class="text-[#7b8ca6]">@payment.Date.ToShortDateString()</span>
                        <div class="flex items-center space-x-2">
                            <span class="inline-block px-2 py-0.5 rounded text-xs font-semibold @(payment.Type == "extra" ? "bg-[#e6f0ff] text-[#2563eb]" : "bg-[#e6f9f0] text-[#22c55e]")">@payment.Type</span>
                            <span class="font-bold text-[#22c55e]">@payment.Amount.ToString("C")</span>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    @if (showPaymentModal)
    {
        <div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
            <div class="bg-white rounded-2xl shadow-lg p-8 w-full max-w-md" role="dialog" aria-modal="true" aria-labelledby="addPaymentModalTitle">
                <h2 id="addPaymentModalTitle" class="text-lg font-extrabold mb-4 text-[#151e2e]">Add Payment to @Debt.Name</h2>
                <form @onsubmit="HandleAddPayment">
                    <div class="mb-4">
                        <label class="block mb-1 font-bold text-[#7b8ca6]" for="paymentAmount">Payment Amount</label>
                        <input id="paymentAmount" class="w-full border rounded px-3 py-2" type="number" step="0.01" @bind="paymentAmount" required autofocus />
                    </div>
                    <div class="mb-6">
                        <label class="block mb-1 font-bold text-[#7b8ca6]" for="paymentType">Payment Type</label>
                        <select id="paymentType" class="w-full border rounded px-3 py-2" @bind="paymentType">
                            <option value="minimum">Minimum Payment</option>
                            <option value="extra">Extra Payment</option>
                        </select>
                    </div>
                    <div class="flex justify-end space-x-2">
                        <button type="button" aria-label="Cancel" class="px-4 py-2 rounded bg-gray-200 hover:bg-gray-300 font-bold text-[#151e2e] focus:ring-2 focus:ring-brandblue5 focus:outline-none hover:scale-105 transition" @onclick="HidePaymentModal">Cancel</button>
                        <button type="submit" aria-label="Add Payment" class="px-4 py-2 rounded bg-[#2563eb] text-white hover:bg-[#1d4ed8] font-bold focus:ring-2 focus:ring-brandblue5 focus:outline-none hover:scale-105 transition">Add Payment</button>
                    </div>
                </form>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public Debt Debt { get; set; } = default!;
    [Parameter] public EventCallback<Debt> OnEdit { get; set; }
    [Parameter] public EventCallback<Debt> OnDelete { get; set; }
    [Parameter] public EventCallback<(string, decimal, string)> OnAddPayment { get; set; }

    private decimal TotalPaid => Debt.Payments?.Sum(p => p.Amount) ?? 0;

    // Baseline: minimum only
    private DateTime? SimPayoffDate => good.Utils.DebtCalculations.SimulatePayoffFromCurrentBalance(Debt.Balance, Debt.InterestRate, Debt.MinimumPayment).PayoffDate;
    private decimal SimTotalInterest => good.Utils.DebtCalculations.SimulatePayoffFromCurrentBalance(Debt.Balance, Debt.InterestRate, Debt.MinimumPayment).TotalInterest;
    // Custom: minimum + extra
    private decimal extraMonthlyPayment = 0;
    private DateTime? CustomPayoffDate => good.Utils.DebtCalculations.SimulatePayoffWithExtraPayment(Debt.Balance, Debt.InterestRate, Debt.MinimumPayment, extraMonthlyPayment).PayoffDate;
    private decimal CustomTotalInterest => good.Utils.DebtCalculations.SimulatePayoffWithExtraPayment(Debt.Balance, Debt.InterestRate, Debt.MinimumPayment, extraMonthlyPayment).TotalInterest;
    private string TimeToPayoff => Debt.InterestRate > 0 && Debt.MinimumPayment > 0 ? good.Utils.DebtCalculations.FormatTimeToPayoff(SimPayoffDate) : "Never";
    private decimal TotalInterest => Debt.InterestRate > 0 && Debt.MinimumPayment > 0 ? SimTotalInterest : 0;
    private string CustomTimeToPayoff => Debt.InterestRate > 0 && Debt.MinimumPayment > 0 ? good.Utils.DebtCalculations.FormatTimeToPayoff(CustomPayoffDate) : "Never";

    private bool showPaymentModal = false;
    private string paymentAmount = string.Empty;
    private string paymentType = "minimum";
    private void ShowPaymentModal() => showPaymentModal = true;
    private void HidePaymentModal() => showPaymentModal = false;
    private async Task HandleAddPayment()
    {
        if (decimal.TryParse(paymentAmount, out var amount) && amount > 0)
        {
            await OnAddPayment.InvokeAsync((Debt.Id, amount, paymentType));
            paymentAmount = string.Empty;
            paymentType = "minimum";
            showPaymentModal = false;
        }
    }
    private void OnExtraPaymentChanged(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value?.ToString(), out var value))
        {
            extraMonthlyPayment = value;
        }
    }
}