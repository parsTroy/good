@page "/"
@using good.Models
@using good.Components
@using good.Components.Payoff
@using good.Components.Debt
@inject Services.LocalStorageService LocalStorage

@functions {
    private List<Debt> debts = new();
    private bool isAddModalOpen = false;
    private Debt? editingDebt = null;
    private Debt? debtToDelete = null;
    private decimal totalBalance => debts.Sum(d => d.Balance);
    private decimal monthlyMinimum => debts.Sum(d => d.MinimumPayment);
    private int openDebts => debts.Count;
    private decimal extraPayment = 0;
    private string payoffStrategy = "avalanche";

    protected override async Task OnInitializedAsync()
    {
        debts = await LocalStorage.GetItemAsync<List<Debt>>("debts") ?? new List<Debt>();
    }

    private async Task HandleAddDebt(Debt newDebt)
    {
        // Failsafe: ensure status is always 'open' if missing or empty
        if (string.IsNullOrWhiteSpace(newDebt.Status))
            newDebt.Status = "open";
        else
            newDebt.Status = newDebt.Status.Trim().ToLower();
        debts.Add(newDebt);
        await LocalStorage.SetItemAsync("debts", debts);
        isAddModalOpen = false;
        StateHasChanged();
    }

    private void HandleCancelAddDebt()
    {
        isAddModalOpen = false;
    }

    private void StartEditDebt(Debt debt)
    {
        editingDebt = new Debt
        {
            Name = debt.Name,
            Balance = debt.Balance,
            MinimumPayment = debt.MinimumPayment,
            InterestRate = debt.InterestRate,
            Status = debt.Status,
            Payments = debt.Payments != null ? new List<Payment>(debt.Payments) : new List<Payment>()
        };
    }

    private async Task HandleEditDebt(Debt updatedDebt)
    {
        var index = debts.FindIndex(d => d.Name == editingDebt!.Name);
        if (index >= 0)
        {
            debts[index] = updatedDebt;
            await LocalStorage.SetItemAsync("debts", debts);
        }
        editingDebt = null;
        StateHasChanged();
    }

    private void HandleCancelEditDebt()
    {
        editingDebt = null;
    }

    private void StartDeleteDebt(Debt debt)
    {
        debtToDelete = debt;
    }

    private async Task ConfirmDeleteDebt()
    {
        if (debtToDelete != null)
        {
            debts.Remove(debtToDelete);
            await LocalStorage.SetItemAsync("debts", debts);
        }
        debtToDelete = null;
        StateHasChanged();
    }

    private void HandleCancelDeleteDebt()
    {
        debtToDelete = null;
    }

    private Task HandleExtraPaymentChange(decimal value)
    {
        extraPayment = value;
        StateHasChanged();
        return Task.CompletedTask;
    }
    private Task HandleStrategyChange(string value)
    {
        payoffStrategy = value;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task HandleAddPayment((string debtId, decimal amount, string type) paymentInfo)
    {
        var (debtId, amount, type) = paymentInfo;
        var debt = debts.FirstOrDefault(d => d.Id == debtId);
        if (debt != null)
        {
            debt.Payments.Add(new Payment
            {
                Amount = amount,
                Date = DateTime.Now,
                Type = type
            });
            debt.Balance = Math.Max(0, debt.Balance - amount);
            if (debt.Balance == 0)
                debt.Status = "closed";
            await LocalStorage.SetItemAsync("debts", debts);
            StateHasChanged();
        }
    }
}

<div class="min-h-screen w-full flex flex-col">
  <div class="w-full max-w-5xl mx-auto px-4 flex flex-col items-center">
    <!-- Header -->
    <div class="w-full flex flex-col items-center mt-12 mb-14">
      <h1 class="text-5xl font-extrabold text-white tracking-tight drop-shadow-lg px-6 py-2 border-2 border-white rounded-lg mb-2">GooD</h1>
      <p class="text-lg text-brandmuted font-medium">Get out of Debt</p>
    </div>

    @if (debts.Count > 0)
    {
      <div class="w-full mb-12">
        <ProgressTracker Debts="@debts" />
      </div>
    }

    <!-- Summary Cards -->
    <div class="w-full grid grid-cols-1 md:grid-cols-3 gap-8 mb-16">
      <div class="bg-white shadow-lg rounded-2xl px-8 py-6 flex flex-col items-start">
        <span class="text-lg font-bold text-brandmuted mb-2">Total Debt</span>
        <span class="text-3xl font-extrabold text-brandred">@totalBalance.ToString("C")</span>
      </div>
      <div class="bg-white shadow-lg rounded-2xl px-8 py-6 flex flex-col items-start">
        <span class="text-lg font-bold text-brandmuted mb-2">Monthly Minimum</span>
        <span class="text-3xl font-extrabold text-brandyellow">@monthlyMinimum.ToString("C")</span>
      </div>
      <div class="bg-white shadow-lg rounded-2xl px-8 py-6 flex flex-col items-start">
        <span class="text-lg font-bold text-brandmuted mb-2">Open Debts</span>
        <span class="text-3xl font-extrabold text-brandblue5">@openDebts</span>
      </div>
    </div>

    @if (debts.Count > 0)
    {
      <div class="w-full mb-12">
        <SuggestedPaymentCard Debts="@debts" TotalMinimumPayment="@monthlyMinimum" />
      </div>
      <div class="w-full grid grid-cols-1 lg:grid-cols-2 gap-8 mb-16">
        <PayoffSummary Debts="@debts" ExtraPayment="@extraPayment" OnExtraPaymentChange="@HandleExtraPaymentChange" Strategy="@payoffStrategy" OnStrategyChange="@HandleStrategyChange" />
        <PayoffChart Debts="@debts" ExtraPayment="@extraPayment" Strategy="@payoffStrategy" />
      </div>
    }

    @if (debts.Count == 0)
    {
      <div class="flex flex-col items-center justify-center mt-8">
        <div class="w-20 h-20 bg-brandblue3 rounded-full flex items-center justify-center mb-6 shadow-lg">
          <!-- Plus Icon -->
          <svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M12 5v14M5 12h14"/></svg>
        </div>
        <h3 class="text-xl font-bold text-white mb-2">No debts yet</h3>
        <p class="text-base text-brandmuted mb-6">Add your first debt to start tracking your journey to financial freedom</p>
        <button class="bg-brandblue5 hover:bg-brandblue3 text-white font-bold rounded-lg px-8 py-3 shadow-lg transition" @onclick="() => isAddModalOpen = true">Add Your First Debt</button>
      </div>
    }
    else
    {
      <div class="w-full flex justify-center mb-8">
        <button class="flex items-center gap-2 bg-brandblue5 hover:bg-brandblue3 text-white font-bold rounded-lg px-8 py-3 shadow-lg transition text-lg" @onclick="() => isAddModalOpen = true">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M12 5v14M5 12h14"/></svg>
          Add Debt
        </button>
      </div>
      <ul class="w-full space-y-10 mb-20">
        @foreach (var debt in debts)
        {
          <li>
            <good.Components.Debt.DebtCard Debt="@debt" OnEdit="() => StartEditDebt(debt)" OnDelete="() => StartDeleteDebt(debt)" OnAddPayment="HandleAddPayment" />
          </li>
        }
      </ul>
      <!-- Optionally, keep a small floating button on mobile only -->
      <!--
      <button class="md:hidden fixed bottom-6 right-6 w-14 h-14 rounded-full bg-brandblue3 hover:bg-brandblue5 hover:scale-105 hover:brightness-110 text-white shadow-2xl flex items-center justify-center z-50 transition-all duration-200" @onclick="() => isAddModalOpen = true">
        <svg class="w-7 h-7" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M12 5v14M5 12h14"/></svg>
      </button>
      -->
    }

    <AddDebtModal IsOpen="@isAddModalOpen" OnSave="HandleAddDebt" OnCancel="HandleCancelAddDebt" />
    @if (editingDebt != null)
    {
      <AddDebtModal IsOpen="true" OnSave="HandleEditDebt" OnCancel="HandleCancelEditDebt" Debt="@editingDebt" IsEditing="true" />
    }
    @if (debtToDelete != null)
    {
      <div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
        <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-sm">
          <h2 class="text-lg font-bold mb-4">Delete Debt</h2>
          <p class="mb-4">Are you sure you want to delete <b>@debtToDelete.Name</b>?</p>
          <div class="flex justify-end space-x-2">
            <button class="px-4 py-2 rounded bg-gray-200 hover:bg-gray-300" @onclick="HandleCancelDeleteDebt">Cancel</button>
            <button class="px-4 py-2 rounded bg-brandred text-white hover:bg-red-700" @onclick="ConfirmDeleteDebt">Delete</button>
          </div>
        </div>
      </div>
    }
  </div>
</div> 