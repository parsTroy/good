@using good.Models
@using Microsoft.AspNetCore.Components
@namespace good.Components.Debt

@if (IsOpen)
{
    <div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-60 z-50">
        <div class="bg-[#181f2a] border border-[#2e3a4d] rounded-2xl shadow-2xl p-8 w-full max-w-md" role="dialog" aria-modal="true" aria-labelledby="addDebtModalTitle">
            <div class="flex items-center justify-between mb-6">
                <h2 id="addDebtModalTitle" class="text-2xl font-extrabold text-white">@(IsEditing ? "Edit Debt" : "Add New Debt")</h2>
                <button type="button" class="text-slate-400 hover:text-white text-xl font-bold focus:outline-none" @onclick="OnCancel" aria-label="Close">&times;</button>
            </div>
            <form @onsubmit="HandleSubmit" class="space-y-5">
                <div>
                    <label class="block mb-1 font-semibold text-slate-200" for="name">Debt Name *</label>
                    <input id="name" class="w-full border border-[#2e3a4d] bg-[#10182a] text-white rounded-lg px-4 py-2 placeholder-slate-500 focus:ring-2 focus:ring-blue-500 focus:outline-none transition" @bind="formData.Name" placeholder="Credit Card, Car Loan, etc." required autofocus />
                    @if (errors.ContainsKey("name"))
                    {
                        <p class="text-red-400 text-sm mt-1">@errors["name"]</p>
                    }
                </div>
                <div>
                    <label class="block mb-1 font-semibold text-slate-200" for="balance">Current Balance *</label>
                    <input id="balance" type="number" step="0.01" class="w-full border border-[#2e3a4d] bg-[#10182a] text-white rounded-lg px-4 py-2 placeholder-slate-500 focus:ring-2 focus:ring-blue-500 focus:outline-none transition" @bind="formData.Balance" placeholder="0.00" required />
                    @if (errors.ContainsKey("balance"))
                    {
                        <p class="text-red-400 text-sm mt-1">@errors["balance"]</p>
                    }
                </div>
                <div>
                    <label class="block mb-1 font-semibold text-slate-200" for="interestRate">Interest Rate (%) *</label>
                    <input id="interestRate" type="number" step="0.01" class="w-full border border-[#2e3a4d] bg-[#10182a] text-white rounded-lg px-4 py-2 placeholder-slate-500 focus:ring-2 focus:ring-blue-500 focus:outline-none transition" @bind="formData.InterestRate" placeholder="0.00" required />
                    @if (errors.ContainsKey("interestRate"))
                    {
                        <p class="text-red-400 text-sm mt-1">@errors["interestRate"]</p>
                    }
                </div>
                <div>
                    <label class="block mb-1 font-semibold text-slate-200" for="minimumPayment">Minimum Payment *</label>
                    <input id="minimumPayment" type="number" step="0.01" class="w-full border border-[#2e3a4d] bg-[#10182a] text-white rounded-lg px-4 py-2 placeholder-slate-500 focus:ring-2 focus:ring-blue-500 focus:outline-none transition" @bind="formData.MinimumPayment" placeholder="0.00" required />
                    @if (errors.ContainsKey("minimumPayment"))
                    {
                        <p class="text-red-400 text-sm mt-1">@errors["minimumPayment"]</p>
                    }
                </div>
                <div>
                    <label class="block mb-1 font-semibold text-slate-200" for="status">Status</label>
                    <select id="status" class="w-full border border-[#2e3a4d] bg-[#10182a] text-white rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none transition" @bind="formData.Status">
                        <option value="open">Open</option>
                        <option value="closed">Closed</option>
                    </select>
                </div>
                <div class="flex space-x-3 pt-6">
                    <button type="button" aria-label="Cancel" class="flex-1 px-4 py-2 rounded-lg border border-[#2e3a4d] bg-[#232c3b] text-slate-300 font-bold hover:bg-[#1a223c] hover:text-white focus:ring-2 focus:ring-blue-500 focus:outline-none transition" @onclick="OnCancel">Cancel</button>
                    <button type="submit" aria-label="@(IsEditing ? "Update Debt" : "Add Debt")" class="flex-1 px-4 py-2 rounded-lg bg-blue-600 text-white font-bold hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:outline-none transition">@(IsEditing ? "Update Debt" : "Add Debt")</button>
                </div>
            </form>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<Debt> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public Debt? Debt { get; set; }
    [Parameter] public bool IsEditing { get; set; } = false;

    private DebtFormData formData = new();
    private Dictionary<string, string> errors = new();

    protected override void OnParametersSet()
    {
        if (Debt != null && IsEditing)
        {
            formData = new DebtFormData
            {
                Name = Debt.Name,
                Balance = Debt.Balance.ToString(),
                InterestRate = Debt.InterestRate.ToString(),
                MinimumPayment = Debt.MinimumPayment.ToString(),
                Status = Debt.Status
            };
        }
        else
        {
            formData = new DebtFormData();
        }
        errors.Clear();
    }

    private async Task HandleSubmit()
    {
        if (!ValidateForm()) return;
        var debt = new Debt
        {
            Name = formData.Name.Trim(),
            Balance = decimal.Parse(formData.Balance),
            InterestRate = decimal.Parse(formData.InterestRate),
            MinimumPayment = decimal.Parse(formData.MinimumPayment),
            Status = formData.Status,
            Payments = Debt?.Payments ?? new List<Payment>()
        };
        await OnSave.InvokeAsync(debt);
    }

    private bool ValidateForm()
    {
        errors.Clear();
        if (string.IsNullOrWhiteSpace(formData.Name))
            errors["name"] = "Debt name is required";
        if (!decimal.TryParse(formData.Balance, out var balance) || balance < 0)
            errors["balance"] = "Valid balance is required";
        if (!decimal.TryParse(formData.InterestRate, out var ir) || ir < 0 || ir > 100)
            errors["interestRate"] = "Interest rate must be between 0 and 100";
        if (!decimal.TryParse(formData.MinimumPayment, out var minPay) || minPay < 0)
            errors["minimumPayment"] = "Valid minimum payment is required";
        StateHasChanged();
        return errors.Count == 0;
    }

    private class DebtFormData
    {
        public string Name { get; set; } = string.Empty;
        public string Balance { get; set; } = string.Empty;
        public string InterestRate { get; set; } = string.Empty;
        public string MinimumPayment { get; set; } = string.Empty;
        public string Status { get; set; } = "open";
    }
} 