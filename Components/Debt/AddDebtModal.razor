@using good.Models
@using Microsoft.AspNetCore.Components
@namespace good.Components.Debt

@if (IsOpen)
{
    <div class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
        <div class="bg-white dark:bg-slate-800 rounded-lg shadow-lg p-6 w-full max-w-md" role="dialog" aria-modal="true" aria-labelledby="addDebtModalTitle">
            <h2 id="addDebtModalTitle" class="text-xl font-bold mb-4">@(IsEditing ? "Edit Debt" : "Add New Debt")</h2>
            <form @onsubmit="HandleSubmit" class="space-y-4">
                <div>
                    <label class="block mb-1 font-medium" for="name">Debt Name *</label>
                    <input id="name" class="w-full border rounded px-3 py-2 @(errors.ContainsKey("name") ? "border-red-500" : "") focus:ring-2 focus:ring-brandblue5 focus:outline-none" @bind="formData.Name" placeholder="Credit Card, Car Loan, etc." required autofocus />
                    @if (errors.ContainsKey("name"))
                    {
                        <p class="text-red-500 text-sm mt-1">@errors["name"]</p>
                    }
                </div>
                <div>
                    <label class="block mb-1 font-medium" for="balance">Current Balance *</label>
                    <input id="balance" type="number" step="0.01" class="w-full border rounded px-3 py-2 @(errors.ContainsKey("balance") ? "border-red-500" : "") focus:ring-2 focus:ring-brandblue5 focus:outline-none" @bind="formData.Balance" placeholder="0.00" required />
                    @if (errors.ContainsKey("balance"))
                    {
                        <p class="text-red-500 text-sm mt-1">@errors["balance"]</p>
                    }
                </div>
                <div>
                    <label class="block mb-1 font-medium" for="interestRate">Interest Rate (%) *</label>
                    <input id="interestRate" type="number" step="0.01" class="w-full border rounded px-3 py-2 @(errors.ContainsKey("interestRate") ? "border-red-500" : "") focus:ring-2 focus:ring-brandblue5 focus:outline-none" @bind="formData.InterestRate" placeholder="0.00" required />
                    @if (errors.ContainsKey("interestRate"))
                    {
                        <p class="text-red-500 text-sm mt-1">@errors["interestRate"]</p>
                    }
                </div>
                <div>
                    <label class="block mb-1 font-medium" for="minimumPayment">Minimum Payment *</label>
                    <input id="minimumPayment" type="number" step="0.01" class="w-full border rounded px-3 py-2 @(errors.ContainsKey("minimumPayment") ? "border-red-500" : "") focus:ring-2 focus:ring-brandblue5 focus:outline-none" @bind="formData.MinimumPayment" placeholder="0.00" required />
                    @if (errors.ContainsKey("minimumPayment"))
                    {
                        <p class="text-red-500 text-sm mt-1">@errors["minimumPayment"]</p>
                    }
                </div>
                <div>
                    <label class="block mb-1 font-medium" for="status">Status</label>
                    <select id="status" class="w-full border rounded px-3 py-2 focus:ring-2 focus:ring-brandblue5 focus:outline-none" @bind="formData.Status">
                        <option value="open">Open</option>
                        <option value="closed">Closed</option>
                    </select>
                </div>
                <div class="flex space-x-3 pt-4">
                    <button type="button" aria-label="Cancel" class="flex-1 px-4 py-2 rounded border border-gray-300 bg-white hover:bg-gray-100 focus:ring-2 focus:ring-brandblue5 focus:outline-none hover:scale-105 transition" @onclick="OnCancel">Cancel</button>
                    <button type="submit" aria-label="@(IsEditing ? "Update Debt" : "Add Debt")" class="flex-1 px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700 focus:ring-2 focus:ring-brandblue5 focus:outline-none hover:scale-105 transition">@(IsEditing ? "Update Debt" : "Add Debt")</button>
                </div>
            </form>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<Debt> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public Debt? Debt { get; set; }
    [Parameter] public bool IsEditing { get; set; } = false;

    private DebtFormData formData = new();
    private Dictionary<string, string> errors = new();

    protected override void OnParametersSet()
    {
        if (Debt != null && IsEditing)
        {
            formData = new DebtFormData
            {
                Name = Debt.Name,
                Balance = Debt.Balance.ToString(),
                InterestRate = Debt.InterestRate.ToString(),
                MinimumPayment = Debt.MinimumPayment.ToString(),
                Status = Debt.Status
            };
        }
        else
        {
            formData = new DebtFormData();
        }
        errors.Clear();
    }

    private async Task HandleSubmit()
    {
        if (!ValidateForm()) return;
        var debt = new Debt
        {
            Name = formData.Name.Trim(),
            Balance = decimal.Parse(formData.Balance),
            InterestRate = decimal.Parse(formData.InterestRate),
            MinimumPayment = decimal.Parse(formData.MinimumPayment),
            Status = formData.Status,
            Payments = Debt?.Payments ?? new List<Payment>()
        };
        await OnSave.InvokeAsync(debt);
    }

    private bool ValidateForm()
    {
        errors.Clear();
        if (string.IsNullOrWhiteSpace(formData.Name))
            errors["name"] = "Debt name is required";
        if (!decimal.TryParse(formData.Balance, out var balance) || balance < 0)
            errors["balance"] = "Valid balance is required";
        if (!decimal.TryParse(formData.InterestRate, out var ir) || ir < 0 || ir > 100)
            errors["interestRate"] = "Interest rate must be between 0 and 100";
        if (!decimal.TryParse(formData.MinimumPayment, out var minPay) || minPay < 0)
            errors["minimumPayment"] = "Valid minimum payment is required";
        StateHasChanged();
        return errors.Count == 0;
    }

    private class DebtFormData
    {
        public string Name { get; set; } = string.Empty;
        public string Balance { get; set; } = string.Empty;
        public string InterestRate { get; set; } = string.Empty;
        public string MinimumPayment { get; set; } = string.Empty;
        public string Status { get; set; } = "open";
    }
} 